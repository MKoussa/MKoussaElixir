<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.5.14/p5.js" type="text/javascript">
</script>
<script
  src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.3/addons/p5.sound.js"
  type="text/javascript"
>
</script>
<script
  src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.3/addons/p5.dom.js"
  type="text/javascript"
>
</script>
<script
  src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
  integrity="sha256-3edrmyuQ0w65f8gfBsqowzjJe2iM6n0nKciPUp8y+7E="
  crossorigin="anonymous"
>
</script>
<div style="grid-column: 1; grid-row: 1 / 2;">
  <h1>Blorp</h1>
  <p>Build in 2019 using the p5 JS library, Blorp is a dual osc subtractive synth.</p>
  <br />
  <br />
  <button onclick="playNote()">Play Note</button>
</div>
<div class="blorp_div">
  <script>
    function playNote(){
      setOscParameters();
      osc1.freq(345.56);
      osc2.freq(345.56);
      osc1Env.play(osc1);
      osc2Env.play(osc2); 
    }
      let osc1;
      let osc2;

      function setup(){  

          //browserWidth = document.querySelector('.blorp_div').width();
          //browserHeight = document.querySelector('.blorp_div').height();
          let rect = document.querySelector('.blorp_div').getBoundingClientRect();

          frameRate(1);

          keyboardPositionRight = rect.right;
          keyboardPositionDown = rect.bottom - 600;

          createCanvas(rect.right, rect.bottom);
          displayLabels(rect);
          buildSliders(rect);
          buildOscillators(osc1, osc2);
      }
        let vco1VolumeSlider;
        let vco1PitchSlider;
        let vco1ShapeSlider;

        let vco1AttackSlider;
        let vco1DecaySlider;
        let vco1SustainSlider;
        let vco1ReleaseSlider;

        let vco2VolumeSlider;
        let vco2PitchSlider;
        let vco2ShapeSlider;

        let vco2AttackSlider;
        let vco2DecaySlider;
        let vco2SustainSlider;
        let vco2ReleaseSlider;

        //Filter
        let filterEGAmountSlider;
        let filterEGResonanceSlider;

        let sliderArr = [];

        let envArr = [];
        let oscArr = [];
        let envelopeCounter = 0;
        let oscillatorCounter = 0;

        let osc1Env;
        let osc1WaveShape;

        let osc1AttackLevel;
        let osc1ReleaseLevel = 0;
        let osc1Attack;
        let osc1Decay;
        let osc1Sustain;
        let osc1Release;

        let osc2Env;
        let osc2WaveShape;

        let osc2AttackLevel;
        let osc2ReleaseLevel = 0;
        let osc2Attack;
        let osc2Decay;
        let osc2Sustain;
        let osc2Release;

        let maxOsc = 60;
        let maxEnv = 60;

        function draw(){
            cursor(CROSS); // Draw cursor as cross
            drawKeyboard(keyboardPositionDown, keyboardPositionRight);
        }

        function mousePressed() {
            if (getAudioContext().state !== 'running') {
            getAudioContext().resume();
            }
            if(mouseY > keyboardPositionDown 
              && mouseY < keyboardPositionDown + majorKeyHeight 
              && mouseX > keyboardPositionRight 
              && mouseX < keyboardPositionRight + (majorKeyWidth * 15)){
            keyPressed(mouseX, mouseY, keyboardPositionRight, keyboardPositionDown);
            }
        }

        function displayLabels(rect){
            //textSize() runs against all calls after it is used
            //Thus, all labels must be sized accordingly

            //Small Labels
            textSize(13);
            let vcoLabelsHeight = 120;

            let vco1VolumeLabel = createP('Volume');
            vco1VolumeLabel.position(rect.left, rect.top);
            vco1VolumeLabel.class("smallLeftLabels");

            let vco1PitchLabel = createP('Pitch');
            vco1PitchLabel.position(rect.left + 60, rect.top);
            vco1PitchLabel.class("smallLeftLabels");
            
            let vco1ShapeLabel = createP('Shape');
            vco1ShapeLabel.position(rect.left + 105, rect.top);
            vco1ShapeLabel.class("smallLeftLabels");

            let vco2VolumeLabel = createP('Volume');
            vco2VolumeLabel.position(rect.left, rect.top + 120);
            vco2VolumeLabel.class("smallLeftLabels");

            let vco2PitchLabel = createP('Pitch');
            vco2PitchLabel.position(rect.left + 60, rect.top + 120);
            vco2PitchLabel.class("smallLeftLabels");
            
            let vco2ShapeLabel = createP('Shape');
            vco2ShapeLabel.position(rect.left + 105, rect.top + 120);
            vco2ShapeLabel.class("smallLeftLabels");

            let vco1AttackLabel = createP('Attack');
            vco1AttackLabel.position(rect.left + 205, rect.top);
            vco1AttackLabel.class("smallLeftLabels");

            let vco1DecayLabel = createP('Decay');
            vco1DecayLabel.position(rect.left + 255, rect.top);
            vco1DecayLabel.class("smallLeftLabels");

            let vco1SustainLabel = createP('Sustain');
            vco1SustainLabel.position(rect.left + 303, rect.top);
            vco1SustainLabel.class("smallLeftLabels");

            let vco1ReleaseLabel = createP('Release');
            vco1ReleaseLabel.position(rect.left + 350, rect.top);
            vco1ReleaseLabel.class("smallLeftLabels");

            let vco2AttackLabel = createP('Attack');
            vco2AttackLabel.position(rect.left + 205, rect.top + 120);
            vco2AttackLabel.class("smallLeftLabels");

            let vco2DecayLabel = createP('Decay');
            vco2DecayLabel.position(rect.left + 255, rect.top + 120);
            vco2DecayLabel.class("smallLeftLabels");

            let vco2SustainLabel = createP('Sustain');
            vco2SustainLabel.position(rect.left + 303, rect.top + 120);
            vco2SustainLabel.class("smallLeftLabels");

            let vco2ReleaseLabel = createP('Release');
            vco2ReleaseLabel.position(rect.left + 350, rect.top + 120);
            vco2ReleaseLabel.class("smallLeftLabels");

            //filter
            <%!-- let filterEGAmountLabel = createP('EG Amount');
            filterEGAmountLabel.position(Math.floor(rect.left / 80, rect.top + 120) + 35, 325);
            filterEGAmountLabel.class("smallRightLabels");

            let filterEGResonanceLabel = createP('Resonance');
            filterEGResonanceLabel.position(Math.floor(rect.left / 80, rect.top + 120) + 90, 325);
            filterEGResonanceLabel.class("smallRightLabels"); --%>
            }

        function buildSliders(rect){
            vco1VolumeSlider = createSlider(1, 100, 25, 1);
            vco1VolumeSlider.position(rect.left, rect.top);
            vco1VolumeSlider.class("slider");
            sliderArr.push(vco1VolumeSlider);

            vco1PitchSlider = createSlider(-100, 100, 0, 1);
            vco1PitchSlider.position(rect.left + 50, rect.top);
            vco1PitchSlider.class("slider");
            sliderArr.push(vco1PitchSlider);

            vco1ShapeSlider = createSlider(0, 3, 0, 1);
            vco1ShapeSlider.position(rect.left + 100, rect.top);
            vco1ShapeSlider.class("slider");
            sliderArr.push(vco1PitchSlider);

            vco1AttackSlider = createSlider(1, 100, 20, 1);
            vco1AttackSlider.position(rect.left + 200, rect.top);
            vco1AttackSlider.class("slider");
            sliderArr.push(vco1AttackSlider);

            vco1DecaySlider = createSlider(1, 100, 20, 1);
            vco1DecaySlider.position(rect.left + 250, rect.top);
            vco1DecaySlider.class("slider");
            sliderArr.push(vco1DecaySlider);

            vco1SustainSlider = createSlider(1, 100, 20, 1);
            vco1SustainSlider.position(rect.left + 300, rect.top);
            vco1SustainSlider.class("slider");
            sliderArr.push(vco1SustainSlider);

            vco1ReleaseSlider = createSlider(1, 100, 20, 1);
            vco1ReleaseSlider.position(rect.left + 350, rect.top);
            vco1ReleaseSlider.class("slider");
            sliderArr.push(vco1ReleaseSlider);

            vco2VolumeSlider = createSlider(1, 100, 25, 1);
            vco2VolumeSlider.position(rect.left, rect.top + 120);
            vco2VolumeSlider.class("slider");
            sliderArr.push(vco2VolumeSlider);

            vco2PitchSlider = createSlider(-100, 100, 0, 1);
            vco2PitchSlider.position(rect.left + 50, rect.top + 120);
            vco2PitchSlider.class("slider");
            sliderArr.push(vco2PitchSlider);

            vco2ShapeSlider = createSlider(0, 3, 0, 1);
            vco2ShapeSlider.position(rect.left + 100, rect.top + 120);
            vco2ShapeSlider.class("slider");
            sliderArr.push(vco2PitchSlider);

            vco2AttackSlider = createSlider(1, 100, 20, 1);
            vco2AttackSlider.position(rect.left + 200, rect.top + 120);
            vco2AttackSlider.class("slider");
            sliderArr.push(vco2AttackSlider);

            vco2DecaySlider = createSlider(1, 100, 20, 1);
            vco2DecaySlider.position(rect.left + 250, rect.top + 120);
            vco2DecaySlider.class("slider");
            sliderArr.push(vco2DecaySlider);

            vco2SustainSlider = createSlider(1, 100, 20, 1);
            vco2SustainSlider.position(rect.left + 300, rect.top + 120);
            vco2SustainSlider.class("slider");
            sliderArr.push(vco2SustainSlider);

            vco2ReleaseSlider = createSlider(1, 100, 20, 1);
            vco2ReleaseSlider.position(rect.left + 350, rect.top + 120);
            vco2ReleaseSlider.class("slider");
            sliderArr.push(vco2ReleaseSlider);

            //filter
            <%!-- filterEGAmountSlider = createSlider(1, 100, 20, 1);
            filterEGAmountSlider.position(Math.floor(rect.left / 80, rect.top + 120), 350);
            filterEGAmountSlider.class("medSlider");
            sliderArr.push(filterEGAmountSlider);

            filterEGResonanceSlider = createSlider(1, 100, 20, 1);
            filterEGResonanceSlider.position(Math.floor(rect.left / 80, rect.top + 120) + 50, 350);
            filterEGResonanceSlider.class("medSlider");
            sliderArr.push(filterEGResonanceSlider); --%>
        }

        getEnvelope = function(){
            let tempEnv;
            if(envArr === undefined || envArr.length == 0){
            for(let buildEnvArrIter = 0; buildEnvArrIter < maxEnv; buildEnvArrIter++){     
                tempEnv = new p5.Envelope();
                envArr.push(tempEnv);
            }
            }
            if(envelopeCounter > maxEnv) {
            envelopeCounter = 0;
            tempEnv = envArr[envelopeCounter];
            return tempEnv;
            }
            envelopeCounter++;
            tempEnv = envArr[envelopeCounter];
            return tempEnv;
        };

        getOscillator = function(){
            let tempOsc;
            if(oscArr === undefined || oscArr.length == 0){
            for(let buildOscArrIter = 0; buildOscArrIter < maxOsc; buildOscArrIter++){     
                tempOsc = new p5.Oscillator();
                oscArr.push(tempOsc);
            }
            }
            if(oscillatorCounter > maxOsc) {
            oscillatorCounter = 0;
            tempOsc = oscArr[oscillatorCounter];
            tempOsc.stop();
            return tempOsc;
            }
            oscillatorCounter++;
            tempOsc = oscArr[oscillatorCounter];
            tempOsc.stop();
            return tempOsc;
        };

        setOscParameters = function(){
            osc1 = getOscillator();
            osc2 = getOscillator();

            osc1Env = getEnvelope();
            osc2Env = getEnvelope();

            osc1AttackLevel = (vco1VolumeSlider.value() / 100);
            osc1Attack =  (vco1AttackSlider.value() / 100);
            osc1Decay = (vco1DecaySlider.value() / 100);
            osc1Sustain = (vco1SustainSlider.value() / 100);
            osc1Release = (vco1ReleaseSlider.value() / 100);
            
            switch(vco1ShapeSlider.value()){
            case 0:
                osc1WaveShape = 'sine';
                break;
            case 1:
                osc1WaveShape = 'triangle';
                break;
            case 2:
                osc1WaveShape = 'sawtooth';
                break;
            case 3:
                osc1WaveShape = 'square';
                break;
            }
                
            osc1Env.setADSR(osc1Attack, osc1Decay, osc1Sustain, osc1Release);
            osc1Env.setRange(osc1AttackLevel, osc1ReleaseLevel);

            osc1.setType(osc1WaveShape);
            osc1.amp(osc1Env);
            osc1.start();

            osc2AttackLevel = (vco2VolumeSlider.value() / 100);
            osc2Attack =  (vco2AttackSlider.value() / 100);
            osc2Decay = (vco2DecaySlider.value() / 100);
            osc2Sustain = (vco2SustainSlider.value() / 100);
            osc2Release = (vco2ReleaseSlider.value() / 100);

            switch(vco2ShapeSlider.value()){
            case 0:
                osc2WaveShape = 'sine';
                break;
            case 1:
                osc2WaveShape = 'triangle';
                break;
            case 2:
                osc2WaveShape = 'sawtooth';
                break;
            case 3:
                osc2WaveShape = 'square';
                break;
            }

            osc2Env.setADSR(osc2Attack, osc2Decay, osc2Sustain, osc2Release);
            osc2Env.setRange(osc2AttackLevel, osc2ReleaseLevel);

            osc2.setType(osc2WaveShape);
            osc2.amp(osc2Env);
            osc2.start();
        };

        buildOscillators = function(osc1, osc2){
            osc1 = new p5.Oscillator();
            osc1.setType('sine');

            osc1AttackLevel = (vco1VolumeSlider.value() / 100);
            osc1Attack =  (vco1AttackSlider.value() / 100);
            osc1Decay = (vco1DecaySlider.value() / 100);
            osc1Sustain = (vco1SustainSlider.value() / 100);
            osc1Release = (vco1ReleaseSlider.value() / 100);
            osc1Env = new p5.Envelope();
            
            //osc1Env.setADSR(osc1Attack, osc1Decay, osc1Sustain, osc1Release);
            osc1Env.setRange(osc1AttackLevel, osc1ReleaseLevel);
            osc1.amp(osc1Env);
            osc1.start();
            
            osc2 = new p5.Oscillator();
            osc2.setType('sine');
            osc2AttackLevel = (vco2VolumeSlider.value() / 100);
            osc2Attack =  (vco2AttackSlider.value() / 100);
            osc2Decay = (vco2DecaySlider.value() / 100);
            osc2Sustain = (vco2SustainSlider.value() / 100);
            osc2Release = (vco2ReleaseSlider.value() / 100);
            osc2Env = new p5.Envelope();
            osc2Env.setADSR(osc2Attack, osc2Decay, osc2Sustain, osc2Release);
            osc2Env.setRange(osc2AttackLevel, osc2ReleaseLevel);
            osc2.amp(osc2Env);
            osc2.start();
            };
            
            /*jshint esversion: 6 */
        //First and last freq are the steps 
        const majorKeys4 = [246.94, 261.63, 293.66, 329.63, 349.23, 392.00, 440.00, 493.88, 523.25];
        const minorKeys4 = [233.08, 277.18, 311.13, 369.99, 415.30, 466.16, 554.37];

        const majorKeys5 = [493.88, 523.25, 587.33, 659.25, 698.46, 783.99, 880.00, 987.77, 1046.50];
        const minorKeys5 = [466.16, 554.37, 622.25, 739.99, 830.61, 932.33, 1108.73];

        const majorKeys6 = [987.77, 1046.50, 1174.66];

        //
        let majorKeyWidth = Math.min((($(window).width() - 10) / 15) - 2, 50);
        let majorKeyHeight = majorKeyWidth * 3;
        //

        keyPressed = function(mouseX, mouseY, keyboardPositionRightPressedVar, keyboardPositionDown){
          setOscParameters();
          
            let minorKeyWidth = majorKeyWidth / 1.6;
            let minorKeyHeight = majorKeyHeight / 2;
            let minorKeyPosition = majorKeyWidth;
            let minorKeyPositionRight = keyboardPositionRightPressedVar + (majorKeyWidth / 1.5);
            let minorKeysToSkip = [2,6,9,13];
            let vco1PitchSliderValue = (vco1PitchSlider.value() / 100) / 2;
            let vco2PitchSliderValue = (vco2PitchSlider.value() / 100) / 2;

            for(keyPressedMajorKeyIterator = 0; keyPressedMajorKeyIterator < 15; keyPressedMajorKeyIterator++){
            if(mouseX > minorKeyPosition * keyPressedMajorKeyIterator + minorKeyPositionRight && mouseX < (minorKeyPosition * keyPressedMajorKeyIterator + minorKeyPositionRight) + minorKeyWidth * 2 && mouseY < keyboardPositionDown + minorKeyHeight && !minorKeysToSkip.includes(keyPressedMajorKeyIterator)){
                if(keyPressedMajorKeyIterator > 9){
                    osc1.freq(minorKeys5[keyPressedMajorKeyIterator - 7] + ((minorKeys5[keyPressedMajorKeyIterator - 6] - minorKeys5[keyPressedMajorKeyIterator - 7]) * vco1PitchSliderValue) );
                    osc2.freq(minorKeys5[keyPressedMajorKeyIterator - 7] + ((minorKeys5[keyPressedMajorKeyIterator - 6] - minorKeys5[keyPressedMajorKeyIterator - 7]) * vco2PitchSliderValue) );
                }
                else if(keyPressedMajorKeyIterator > 6 && keyPressedMajorKeyIterator < 9){
                    osc1.freq(minorKeys5[keyPressedMajorKeyIterator - 6] + ((minorKeys5[keyPressedMajorKeyIterator - 5] - minorKeys5[keyPressedMajorKeyIterator - 6]) * vco1PitchSliderValue));
                    osc2.freq(minorKeys5[keyPressedMajorKeyIterator - 6] + ((minorKeys5[keyPressedMajorKeyIterator - 5] - minorKeys5[keyPressedMajorKeyIterator - 6]) * vco2PitchSliderValue));
                }
                else if(keyPressedMajorKeyIterator > 2 && keyPressedMajorKeyIterator < 6){
                    osc1.freq(minorKeys4[keyPressedMajorKeyIterator] + ((minorKeys4[keyPressedMajorKeyIterator + 1] - minorKeys4[keyPressedMajorKeyIterator]) * vco1PitchSliderValue));
                    osc2.freq(minorKeys4[keyPressedMajorKeyIterator] + ((minorKeys4[keyPressedMajorKeyIterator + 1] - minorKeys4[keyPressedMajorKeyIterator]) * vco2PitchSliderValue));
                }
                else{
                    osc1.freq(minorKeys4[keyPressedMajorKeyIterator + 1] + ((minorKeys4[keyPressedMajorKeyIterator] - minorKeys4[keyPressedMajorKeyIterator + 1]) * vco1PitchSliderValue));
                    osc2.freq(minorKeys4[keyPressedMajorKeyIterator + 1] + ((minorKeys4[keyPressedMajorKeyIterator] - minorKeys4[keyPressedMajorKeyIterator + 1]) * vco2PitchSliderValue));
                }
                }
            else if(mouseX > (majorKeyWidth * keyPressedMajorKeyIterator + keyboardPositionRightPressedVar) && mouseX < majorKeyWidth * (keyPressedMajorKeyIterator + 1) + keyboardPositionRightPressedVar && mouseY < majorKeyHeight + keyboardPositionDown)
            {
                if(keyPressedMajorKeyIterator == 14) {
                osc1.freq(majorKeys6[keyPressedMajorKeyIterator - 13] + ((majorKeys6[keyPressedMajorKeyIterator - 12] - majorKeys6[keyPressedMajorKeyIterator - 13]) * vco1PitchSliderValue));
                osc2.freq(majorKeys6[keyPressedMajorKeyIterator - 13] + ((majorKeys6[keyPressedMajorKeyIterator - 12] - majorKeys6[keyPressedMajorKeyIterator - 13]) * vco2PitchSliderValue));
                }
                else if(keyPressedMajorKeyIterator > 6 && keyPressedMajorKeyIterator <=13){
                osc1.freq(majorKeys5[keyPressedMajorKeyIterator - 6] + ((majorKeys5[keyPressedMajorKeyIterator - 5] - majorKeys5[keyPressedMajorKeyIterator - 6]) * vco1PitchSliderValue));
                osc2.freq(majorKeys5[keyPressedMajorKeyIterator - 6] + ((majorKeys5[keyPressedMajorKeyIterator - 5] - majorKeys5[keyPressedMajorKeyIterator - 6]) * vco2PitchSliderValue));
                }
                else if(keyPressedMajorKeyIterator <= 6){
                osc1.freq(majorKeys4[keyPressedMajorKeyIterator + 1] + ((majorKeys4[keyPressedMajorKeyIterator + 2] - majorKeys4[keyPressedMajorKeyIterator + 1]) * vco1PitchSliderValue));
                osc2.freq(majorKeys4[keyPressedMajorKeyIterator + 1] + ((majorKeys4[keyPressedMajorKeyIterator + 2] - majorKeys4[keyPressedMajorKeyIterator + 1]) * vco2PitchSliderValue));
                }
            }
        }             
            osc1Env.play(osc1);
            osc2Env.play(osc2);    
        };

        drawKeyboard = function(keyboardPositionDown, keyboardPositionRightDrawlet) {
            fill(240);//Make the keys white

            let majorKeyIteration;
            for (majorKeyIteration = 0; majorKeyIteration < 15; majorKeyIteration++){
            if(majorKeyIteration == 0){
                rect((majorKeyWidth * majorKeyIteration) + keyboardPositionRightDrawlet, keyboardPositionDown, majorKeyWidth, majorKeyHeight,  10, 0, 7, 18);
            } 
            else if(majorKeyIteration == 14){
                rect((majorKeyWidth * majorKeyIteration) + keyboardPositionRightDrawlet, keyboardPositionDown, majorKeyWidth, majorKeyHeight,  0, 10, 7, 18);
            }
            else{
                rect((majorKeyWidth * majorKeyIteration) + keyboardPositionRightDrawlet, keyboardPositionDown, majorKeyWidth, majorKeyHeight,  0, 0, 7, 18);
            }
                
            }

            fill(20);//Make the keys black
            let minorKeyWidth = majorKeyWidth / 1.6;
            let minorKeyHeight = majorKeyHeight / 2;
            let minorKeyPosition = majorKeyWidth;
            let minorKeyPositionRight = keyboardPositionRight + (majorKeyWidth / 1.5);

            let minorKeysToSkip = [2,6,9,13];
            let minorKeyIteration;
            for (minorKeyIteration = 0; minorKeyIteration < 14; minorKeyIteration++){
            if(!minorKeysToSkip.includes(minorKeyIteration)){
                rect(minorKeyPosition * minorKeyIteration + minorKeyPositionRight, keyboardPositionDown, minorKeyWidth, minorKeyHeight,  0, 0, 18, 7);
                }
            }
        };
  </script>
</div>
